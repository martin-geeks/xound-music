
const Blueprint = require("./mysql/blueprint");


class MySQL {

constructor() {
this.portal = require("mysql");

this.source = src => this.server = src;

this.pool = size => {
this.connectionPool = this.portal.createPool(Object.assign({}, this.server, { connectionLimit: size }));}

this.connection = opts => {
return new Promise((res,rej) => {
this.connectionPool.getConnection((error, connection) => {
return error ? rej(error) : res(connection);
});});}

this.use = async database => {
let connection = await this.connection();
connection.changeUser({ database: database });
return connection;
}

this.run = (query,connection,options,free) => {
return new Promise((res,rej) => {
connection.query(query,options, (error, result) => {
free ? connection.release() : "";
error ? rej(error): res(result);
}); });}

this.database = async database => {
let connection = await this.connection();
return await this.run(`CREATE DATABASE ${database}`, connection, [], true);
}

this.drop = async (database, table) => {
let connection = table ? await this.use(database) : await this.connection();
return await this.run(table ? `DROP TABLE IF EXISTS \`${table}\`` : `DROP DATABASE IF EXISTS ${database}`, connection, [], true);
}

this.set = async (global, value) => {
let connection = await this.connection;
return await this.run(`SET GLOBAL ${global}=?`, connection, [value], true);
}

this.blueprint = options => new Blueprint(options, this);

this.string = length => `VARCHAR(${length})`;
this.int = (size=255) => `INT(${size})`;
this.bigint = (size=255) => `BIGINT(${size})`;
this.datetime = d => "DATETIME";

}


}

module.exports = orm => new MySQL();