
const ParentBlueprint = require("./../blueprint.js");
const Chain = require("./chain.js")
const Stack = require("./stack.js");

class Blueprint extends ParentBlueprint {

async chain() {
let connection = await this.driver().use(this.database);
return new Chain({ driver: this.driver, database: this.database, connection: connection, blueprint: this });
}

async table(table) {
let connection = await this.driver().use(this.database);
let sql = [`CREATE TABLE ${table}(`];
let rows = Array.from(this.rows.entries());
rows.forEach((v,i) => {
sql.push(`\`${v[0]}\` ${v[1].type}${v[1].unsigned ? " UNSIGNED" : "" }${!v[1].null === false ? " NOT NULL" : ""}${v[1].increment ? " AUTO_INCREMENT" : ""}${i !== rows.length-1 ? "," : ""} `);});
this.key ? sql.push(`,PRIMARY KEY(${this.key})`) : "";
sql.push(")");
return await this.run(sql.join(""), connection, [], true);
}

select(fields=[]) {
return (new Stack({ driver: this.driver, database: this.database }).select(fields));
}

insert() {
return (new Stack({ driver: this.driver, database: this.database }).insert());
}

update(table) {
return (new Stack({ driver: this.driver, database: this.database }).update(table));
}

}

module.exports = Blueprint;